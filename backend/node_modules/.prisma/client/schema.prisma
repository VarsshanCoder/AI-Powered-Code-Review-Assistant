generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String?
  avatar    String?
  githubId  String?  @unique
  gitlabId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizations OrganizationMember[]
  repositories  Repository[]
  reviews       Review[]
  comments      Comment[]

  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members      OrganizationMember[]
  repositories Repository[]
  rules        Rule[]

  @@map("organizations")
}

model OrganizationMember {
  id     String @id @default(cuid())
  role   Role   @default(MEMBER)
  userId String
  orgId  String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@map("organization_members")
}

model Repository {
  id            String   @id @default(cuid())
  name          String
  fullName      String
  description   String?
  url           String
  defaultBranch String   @default("main")
  isPrivate     Boolean  @default(false)
  language      String?
  provider      Provider
  externalId    String
  webhookId     String?

  userId String?
  orgId  String?

  user         User?         @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [orgId], references: [id])
  reviews      Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, externalId])
  @@map("repositories")
}

model Review {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      ReviewStatus @default(PENDING)
  score       Float?
  branch      String
  commitSha   String
  prNumber    Int?

  repositoryId String
  userId       String

  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id])

  findings Finding[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Finding {
  id          String      @id @default(cuid())
  type        FindingType
  severity    Severity
  title       String
  description String
  filePath    String
  startLine   Int
  endLine     Int
  suggestion  String?
  autoFixable Boolean     @default(false)
  fixed       Boolean     @default(false)

  reviewId String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("findings")
}

model Comment {
  id       String  @id @default(cuid())
  content  String
  filePath String?
  line     Int?

  reviewId String
  userId   String

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Rule {
  id          String   @id @default(cuid())
  name        String
  description String?
  pattern     String
  severity    Severity
  language    String?
  enabled     Boolean  @default(true)

  orgId        String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rules")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum Provider {
  GITHUB
  GITLAB
  BITBUCKET
}

enum ReviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum FindingType {
  QUALITY
  SECURITY
  PERFORMANCE
  STYLE
  BUG
  COMPLEXITY
}

enum Severity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
